class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();  
        char operator = '+';  
        int number = 0;  

        for (int i = 0; i < s.length(); i++) {  
            char currentChar = s.charAt(i);  

            // If current character is a digit, construct the complete number  
            if (Character.isDigit(currentChar)) {  
                number = number * 10 + (currentChar - '0');  
            }  

            // If the current character is an operator or we are at the end of the string  
            if (!Character.isDigit(currentChar) && currentChar != ' ' || i == s.length() - 1) {  
                // Perform the previous operation based on the last operator  
                if (operator == '+') {  
                    stack.push(number);  
                } else if (operator == '-') {  
                    stack.push(-number);  
                } else if (operator == '*') {  
                    stack.push(stack.pop() * number);  
                } else if (operator == '/') {  
                    stack.push(stack.pop() / number);  
                }  
                // Update the operator and reset number for the next iteration  
                operator = currentChar;  
                number = 0;  
            }  
        }  

        // Sum up all values in the stack to get the result  
        int result = 0;  
        while (!stack.isEmpty()) {  
            result += stack.pop();  
        }  
        
        return result;  
    }
}
